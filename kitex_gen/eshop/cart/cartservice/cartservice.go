// Code generated by Kitex v0.12.0. DO NOT EDIT.

package cartservice

import (
	"context"
	"errors"
	cart "eshop_cart/kitex_gen/eshop/cart"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"addItem": kitex.NewMethodInfo(
		addItemHandler,
		newCartServiceAddItemArgs,
		newCartServiceAddItemResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"getList": kitex.NewMethodInfo(
		getListHandler,
		newCartServiceGetListArgs,
		newCartServiceGetListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"updateItem": kitex.NewMethodInfo(
		updateItemHandler,
		newCartServiceUpdateItemArgs,
		newCartServiceUpdateItemResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"deleteItem": kitex.NewMethodInfo(
		deleteItemHandler,
		newCartServiceDeleteItemArgs,
		newCartServiceDeleteItemResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	cartServiceServiceInfo                = NewServiceInfo()
	cartServiceServiceInfoForClient       = NewServiceInfoForClient()
	cartServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return cartServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return cartServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return cartServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "cartService"
	handlerType := (*cart.CartService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "cart",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.0",
		Extra:           extra,
	}
	return svcInfo
}

func addItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cart.CartServiceAddItemArgs)
	realResult := result.(*cart.CartServiceAddItemResult)
	success, err := handler.(cart.CartService).AddItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCartServiceAddItemArgs() interface{} {
	return cart.NewCartServiceAddItemArgs()
}

func newCartServiceAddItemResult() interface{} {
	return cart.NewCartServiceAddItemResult()
}

func getListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cart.CartServiceGetListArgs)
	realResult := result.(*cart.CartServiceGetListResult)
	success, err := handler.(cart.CartService).GetList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCartServiceGetListArgs() interface{} {
	return cart.NewCartServiceGetListArgs()
}

func newCartServiceGetListResult() interface{} {
	return cart.NewCartServiceGetListResult()
}

func updateItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cart.CartServiceUpdateItemArgs)
	realResult := result.(*cart.CartServiceUpdateItemResult)
	success, err := handler.(cart.CartService).UpdateItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCartServiceUpdateItemArgs() interface{} {
	return cart.NewCartServiceUpdateItemArgs()
}

func newCartServiceUpdateItemResult() interface{} {
	return cart.NewCartServiceUpdateItemResult()
}

func deleteItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*cart.CartServiceDeleteItemArgs)
	realResult := result.(*cart.CartServiceDeleteItemResult)
	success, err := handler.(cart.CartService).DeleteItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCartServiceDeleteItemArgs() interface{} {
	return cart.NewCartServiceDeleteItemArgs()
}

func newCartServiceDeleteItemResult() interface{} {
	return cart.NewCartServiceDeleteItemResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddItem(ctx context.Context, req *cart.AddItemRequest) (r *cart.BaseResponse, err error) {
	var _args cart.CartServiceAddItemArgs
	_args.Req = req
	var _result cart.CartServiceAddItemResult
	if err = p.c.Call(ctx, "addItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetList(ctx context.Context, req *cart.PageRequest) (r *cart.PageResponse, err error) {
	var _args cart.CartServiceGetListArgs
	_args.Req = req
	var _result cart.CartServiceGetListResult
	if err = p.c.Call(ctx, "getList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateItem(ctx context.Context, req *cart.UpdateRequest) (r *cart.UpdateResponse, err error) {
	var _args cart.CartServiceUpdateItemArgs
	_args.Req = req
	var _result cart.CartServiceUpdateItemResult
	if err = p.c.Call(ctx, "updateItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteItem(ctx context.Context, req *cart.DeleteRequest) (r *cart.BaseResponse, err error) {
	var _args cart.CartServiceDeleteItemArgs
	_args.Req = req
	var _result cart.CartServiceDeleteItemResult
	if err = p.c.Call(ctx, "deleteItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
